import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, FormArray } from '@angular/forms';
@Component({
  selector: 'app-add-status',
  templateUrl: './add-status.component.html',
  styleUrls: ['./add-status.component.css']
})
export class AddStatusComponent implements OnInit {

  status = [ "i'm Available" , "i'm not Available" , "i'm in Meeting" ];
  form: FormGroup;
  submitted: boolean;
  addControls: any;
  statusValue: string;
  clientName_value: string;
  selectedOption: any;
  onStatus_Button_Click: string;
  constructor(private fb: FormBuilder) { }

  ngOnInit() {
    this.form = this.fb.group({
      select_status: [''],
      client_name: [''],
      addStatusForm: this.fb.array([
        this.getControls()
      ])
    });
    this.submitted = false;
  }

  getControls(){
    return this.fb.group({
      clientName: [''],
      status: [''],
    })
  }

  getFormArray(): FormArray{
    return this.form.get('addStatusForm') as FormArray;
  }

  onAdd(){
    this.statusValue = this.selectedOption ;
    console.log(this.statusValue);
    console.log(this.clientName_value);
      
    this.submitted = true;
    this.addControls = (<FormArray> this.form.controls['addStatusForm']);
    this.addControls.push(this.getControls());
  
    console.log(this.form.get('addStatusForm').value);
    
    //this.setValues();
    console.log(this.addControls.value);
    const arr = this.addControls.value;

    console.log(this.addControls.length);
    for( let i = 0; i < this.addControls.length; i++){
      this.patchVal(i);     
    }
  
  }
  patchVal(i){
    ((this.form.get('addStatusForm') as FormArray).at(i) as FormGroup).get('clientName').patchValue(this.clientName_value);
    // let x = (<FormArray>this.form.controls['addStatusForm']).at(i);
    // console.log(x);
    
    // x.patchValue({
    //   clientName: this.clientName_value,
    //   status: this.statusValue
    // });
  }

  setValues(i){
    const controlArray = <FormArray> this.form.get('addStatusForm');
    controlArray.controls[i].get('clientName').setValue(this.clientName_value);
    controlArray.controls[i].get('status').setValue(this.statusValue);
  }

  onAvailable(index: number){
    
    this.onStatus_Button_Click = "I'm Available";
    //this.statusValue = 'Available';
  }

  onNotAvailable(index: number){
    this.onStatus_Button_Click = "I'm Not Available";
    const controlArray = <FormArray> this.form.get('addStatusForm');
    controlArray.controls[index].get('status').setValue(this.onStatus_Button_Click);
  }

  onInMeeting(){

  }

  removeItem(index: number){
    const control = <FormArray>this.form.controls["addStatusForm"];
    control.removeAt(index);
  }

  // onChange($event){
  //   (<FormArray>this.form.get('addStatusForm')).controls.map((res)=>{
  //     console.log(res);
      
  //     if(res.value.res == $event){
  //       res.patchValue({
  //         clientName : this.clientName_value,
  //         status : this.statusValue
  //       })
  //     }
  //   })
  // }
}
// https://stackblitz.com/edit/angular-form-dynamic-add-control-so59033703?file=app%2Fapp.component.ts

// https://stackoverflow.com/questions/41727013/setting-angular-2-formarray-value-in-reactiveform


// onAdd(){
//   this.statusValue = this.selectedOption ;
//   console.log(this.statusValue);
//   console.log(this.clientName_value);
  
  
//   this.submitted = true;
//   this.addControls = <FormArray> this.form.controls['addStatusForm'];
//   this.addControls.push(this.getControls());

//   //this.setValues();
//   console.log(this.addControls.value);
//   const arr = this.addControls.value;
//   console.log(arr);
//   for( let i = 0; i<arr.length; i++){
//     this.patchVal(i);
//     // arr[i].clientName = this.clientName_value;
//     // arr[i].status = this.statusValue;
//     // console.log(arr[i]);
//     // // arr[i].push({
//     // //   clientName: this.clientName_value,
//     // //   status: this.statusValue
//     // // });
//     // const controlArray = <FormArray> this.form.get('addStatusForm');
//     // controlArray.controls[i].get('clientName').setValue(arr[i].clientName);
//     // controlArray.controls[i].get('status').setValue(arr[i].status);
//   }
//   // Object.keys(arr,index)
//   // this.addControls.value.forEach(element => {
//   //   console.log(element);
      
//   //   // Object.keys(element).forEach((k)=>{
//   //   //   console.log(element[k].value);
      
//   //   // })
//   //   // console.log(element);
//   // });
  
//   // this.getFormArray.setValue([
//   // {
//   //     clientName : this.clientName_value,
//   //     status : this.statusValue
//   // }]
//   // );
// }




//------------------------------ HTML --------------------------------------------//

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css" />

<p>add-task works!</p>

<div>
    <form [formGroup]="form">
        <div class="card">
            <select [(ngModel)]="selectedOption" formControlName="select_status" >
                <option>Select the status:</option>
                <option *ngFor="let item of status">{{ item }}</option>
            </select>
            <div>
                <label>Client Name:</label>
                <input type="text" [(ngModel)]="clientName_value" formControlName="client_name" >
            </div>
            <div>
                <button (click)="onAdd()"> Add </button>
            </div>
        </div>
        <div *ngIf="submitted" style="border: 2px solid;margin: 10px;">
            <div *ngFor="let item of formArray">
                <div>
                    <label> Client Name:- </label>
                    <label formControlName="clname"> {{ item.client_name }}</label>
                </div>
                <div>
                    <label> Status:- </label>
                    <label [(ngModel)]="stats" formControlName="stat"> {{ item.select_status }}</label>
                </div>
                <div *ngFor="let btnval of buttonValue; let i = index">
                    <button type="button" value="item" (click)="onBtnClick(i)"> {{ btnval }}</button>
                </div>
            </div>
        </div>
        <!-- <div *ngIf="submitted " style="border: 2px solid;margin: 10px;">
            <div formArrayName="addStatusForm">
                <div *ngFor="let item of form.get('addStatusForm')['controls']; let i = index" style="border: 1px solid;">
                    <div [formGroupName]="i">
                        <div>
                            <label>Client Name:</label>
                            <input type="text" formControlName="clientName">
                        </div>
                        <label>Status:</label>
                        <div>
                            <input type="text" formControlName="status" [value]="onStatus_Button_Click">
                        </div>
                        <button type="button" (click)="onAvailable(i)"> Available </button>
                        <button type="button" (click)="onNotAvailable(i)">Not Available</button>
                        <button type="button" (click)="onInMeeting()">In Meeting</button> 
                        <i
                        class="fas fa-minus-square"
                        style="margin-left: 10px"
                        (click)="removeItem(i)"
                        ></i>
                    </div>
                </div>
            </div>
        </div> -->
    </form>
</div>




//----------------------
New html with edit,delete,search:--


<!-- <div class="row">
            <div *ngIf="submitted" style="border: 2px solid;margin: 10px;">
                <div *ngFor="let item of formArray; let i_ = index" style="margin: 20px;">
                    <div>
                            <!-- [style.visibility]="(searchData == true) ? 'hidden' : 'visible'" -->
                        <div [style.visibility]="(searchData == true) ? 'hidden' : 'visible'">
                            
                            <!-- <div class="col-md-1"> -->
                                <div >
                                    <label> Client Name:- </label>
                                    <label [ngStyle]="{'background-color':item.color}"> {{ item.client_name }}</label>
                                    <button class="btn btn-secondary" style="margin-left:70%" (click)="updateData(i_)"> Edit </button>
                                    <button class="btn btn-secondary" style="margin-left:5px" (click)="deleteData(i_)"> Delete </button>
                                </div>
                                <div>
                                    <label> Status:-  </label>
                                    <label [ngStyle]="{'background-color':item.color}"> {{ item.select_status }}</label>
                                </div>
                                <!-- </div> -->
                            </div>
                            <hr class="dashed">
                            <!-- <div class="col-md-10"> -->
                                
                                <div style="margin-right: 10px;" [style.visibility]="(searchData == true) ? 'hidden' : 'visible'">
                                    <ng-container *ngFor="let btnval of buttonValue; let i = index">
                                        <button  class="btn btn-primary" type="button" (click)="onStatusBtnClick(i_,i)"> {{ btnval.value }}</button>
                                    </ng-container>
                                </div>
                                <!-- </div> -->
                                <hr class="rounded">
                        </div>
                        <div>
                            <div *ngFor="let item1 of filterData">
                                <div>
                                        <div >
                                            <label> Client Name:- </label>
                                            <label [ngStyle]="{'background-color':item1.color}"> {{ item1.client_name }}</label>
                                            <button class="btn btn-secondary" style="margin-left:70%" (click)="updateData(i_)"> Edit </button>
                                            <button class="btn btn-secondary" style="margin-left:5px" (click)="deleteData(i_)"> Delete </button>
                                        </div>
                                        <div>
                                            <label> Status:-  </label>
                                            <label [ngStyle]="{'background-color':item1.color}"> {{ item1.select_status }}</label>
                                        </div>
                                </div>
                                <hr class="dashed">
                                    <div style="margin-right: 10px;">
                                        <ng-container *ngFor="let btnval of buttonValue; let i = index">
                                            <!-- <button  class="btn btn-primary" type="button" (click)="onStatusBtnClick(i_,i)"> {{ btnval.value }}</button> -->
                                        </ng-container>
                                    </div>
                                <hr class="rounded">
                            </div>
                        </div>
                </div>
                <!-- Filtered Data:------------------------------------------------------------------------------ -->
            </div>
        </div> -->





//--=--====-===-=-==-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

// https://stackblitz.com/edit/angular-form-dynamic-add-control-so59033703?file=app%2Fapp.component.ts

// https://stackoverflow.com/questions/41727013/setting-angular-2-formarray-value-in-reactiveform

 // Search1(clientName_value: string): string[]{
  //       // const filterD = clientName_value.toLowerCase();
  //   // return this.formArray.filter(val=>val.includes(filterD));
  // }

   // if(this.formArrayLength > 0){
    //   this.showDeleteButton = true;
    // }
    // else{
    //   this.showDeleteButton = false;
    // }


    // Search1(clientName_value: string){
    //   // let findV = this.formArray.find(x => x.client_name == this.clientName_value);
    //   // console.log(findV);
    //   this.searchData = true;
    //   this.formArray.forEach((val)=>{
    //     console.log(val);
    //     console.log(val.client_name);
    //     const filterValue = this.formArray.filter((item)=>{    
    //       return item.client_name.toLowerCase().includes(clientName_value.toLowerCase());
    //     });
    //     this.filterData = filterValue;
    //     // Object.values(val).forEach((res)=>{
    //     //   console.log(res);
  
    //     // });
        
    //   });
    //   // const filterValue1 = this.formArray.filter((item)=>{    
    //   //   item.forEach(element => {
    //   //     console.log("Clients name:-->",element.client_name);
    //   //   });
    //   //   return item.client_name.toLowerCase().includes(clientName_value.toLowerCase());
    //   // });
      
    // }



    // Search(clientName_value: string, selectedOption: string){
    //   // let findV = this.formArray.find(x => x.client_name == this.clientName_value);
    //   // console.log(findV);
    //   try{
    //     if(this.clientName_value !== '' && this.selectedOption == ''){
  
        
    //     this.searchData = true;
    //     if(this.clientName_value == ''){
    //       this.searchData = false;
    //     }
    //     const filterValue = this.formArray.filter((item)=>{ 
    //       console.log(item);
    //       return (item.client_name.toLowerCase().includes(clientName_value.toLowerCase()));
    //     });
    //     console.log(filterValue);
    //     this.filterData = filterValue;
    //     console.log(this.filterData);
    //       // for(let i = 0; i < this.formArray.length; i++){
    //       //   var itemFound: boolean;
    //       //   if(item[this.formArray[i]].toLowerCase().includes(this.formArray[i].value.toLowerCase())){
    //       //     itemFound = true;
    //       //   }
    //       // }
    //       // return itemFound;
    //       //let statVal = item
    //       // Object.values(item).forEach((res)=>{
    //       //   console.log(res);
    //       //   return 
    //       // })
         
    //       //if(this.clientName_value !== ''){
    //         //return (item.client_name.toLowerCase().includes(clientName_value.toLowerCase()));
    //       //}
    //       // else{
    //       //   return (item.select_status.toLowerCase().includes(selectedOption.toLowerCase()));
    //       // }
    //       // else if(this.selectedOption !== ''){
    //       //   return (item.select_status.toLowerCase().includes(selectedOption.toLowerCase()));
    //       // }
    //       //return (item.client_name.toLowerCase().includes(clientName_value.toLowerCase()) || item.select_status.toLowerCase().includes(selectedOption.toLowerCase()));
    //       // if(selectedOption !== ''){
    //       //   this.form.reset();
          
          
    //       //return (item.select_status.toLowerCase().includes(selectedOption.toLowerCase()));
    //       //}
    //       // else{
    //       //   return item.client_name.toLowerCase().includes(clientName_value.toLowerCase());
    //       // }
    //       // const filterValue2 = this.formArray.filter(item=>{
    //       //   return item.select_status.toLowerCase().includes(selectedOption.toLowerCase())
    //       // })
    //       //this.filterData = this.clientName_value !== null ? filterValue : filterValue2;
    //     }
    //     else if(this.selectedOption !== '' && this.clientName_value == ''){
  
    //       //if(this.selectedOption !== '' && this.clientName_value == ''){
    //         this.searchData = false;
    //         this.searchData1 = true;
    //       //}
    //       const filterValue1 = this.formArray.filter(item=>{
    //         return item.select_status.toLowerCase().includes(selectedOption.toLowerCase());
    //       });
    //       this.filterData1 = filterValue1;
    //       console.log("Filter Data:-->",this.filterData1);
    //     }
          
    //   }
    //   catch(error){}
      
    // }

    // Search1(){
    //   try{
    //     // if(this.selectedOption && this.clientName_value !== ''){
    //     //   const filtrVal = this.formArray.filter((item)=>{
    //     //     return item.select_status.toLowerCase().includes(selectedOption)
    //     //   });
    //     //   this.filterData = filtrVal;
    //     // }
    //     // else if(this.clientName_value !== '' && !this.selectedOption){
    //     //   const filtrVal1 = this.formArray.filter((item)=>{
    //     //     return item.client_name.toLowerCase().includes(clientName_value.toLowerCase());
    //     //   });
    //     //   this.filterData1 = filtrVal1;
    //     // }
    //     // const filtrVal = this.formArray.filter((item)=>{
    //     //   Object.values(item).forEach((res)=>{
    //     //     if(item.res == this.clientName_value || item.res == this.selectedOption){
    //     //       console.log(res);
              
    //     //       return res;
    //     //     }
  
    //     //   });
    //     //   console.log(item.res);
    //     //   return item.res;
          
    //     // });
    //     // this.filterData = filtrVal;
    //     // console.log(this.filterData);
        
    //   }catch(error){
  
    //   }
    // }
    



    ///  EXTRA HTML PART FOR SEARCH STATUS WISE //

    <div [style.visibility]="(searchData1 == false) ? 'hidden' : 'visible'" style="margin: 20px;">
                    <p>Searched Results status wise</p>
                    <div *ngFor="let item1 of filterData1 ; let _i = index">
                        <div>
                            <div >
                                <label> Client Name:- </label>
                                <label> {{ item1.client_name }}</label>
                                <!-- <button class="btn btn-secondary" style="margin-left:70%" (click)="updateData(_i)"> Edit </button>
                                <button class="btn btn-secondary" style="margin-left:5px" (click)="deleteData(_i)"> Delete </button> -->
                            </div>
                            <div>
                                <label> Status:-  </label>
                                <label [ngStyle]="{'color': item1.color}"> {{ item1.select_status }}</label>
                            </div>
                        </div>
                        <hr class="dashed">
                        <div style="margin-right: 10px;">
                            <ng-container *ngFor="let btnval of buttonValue; let i = index">
                                <button style="color: black;" [ngStyle]="{'background-color': btnval.color}" class="btn btn-primary" type="button" (click)="onStatusBtnClick(_i,i)"> {{ btnval.value }}</button>
                            </ng-container>
                        </div>
                        <hr class="rounded">
                    </div>
                </div>